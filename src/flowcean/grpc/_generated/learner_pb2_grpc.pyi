"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

learner.proto

Protocol Buffers definitions for the Flowcean Learner gRPC service.

This file defines messages and services for exchanging time series data,
predictions, and status information between clients and the Learner service.

Messages:
  - DataPackage: Contains input and output time series data.
  - Prediction: Contains predicted time series and a status message.
  - TimeSeries: Represents a sequence of time samples.
  - TimeSample: Represents a single data point with a timestamp.
  - DataField: Represents a value that can be int, double, or string.
  - StatusMessage: Communicates the status and progress of operations.
  - Message: Contains log messages with levels and sender info.
  - Empty: An empty message for RPCs that require no data.

Enums:
  - Status: Indicates the current status of an operation.
  - LogLevel: Specifies the severity of log messages.

Service:
  - Learner: Provides RPCs for training, prediction, and export.
"""

import abc
import collections.abc
import grpc
import grpc.aio
import src.flowcean.grpc.proto.learner_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class LearnerStub:
    """The Learner service provides RPCs for training, prediction, and export."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Train: grpc.UnaryStreamMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.DataPackage,
        src.flowcean.grpc.proto.learner_pb2.StatusMessage,
    ]

    Predict: grpc.UnaryUnaryMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.DataPackage,
        src.flowcean.grpc.proto.learner_pb2.Prediction,
    ]

    Export: grpc.UnaryUnaryMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.Empty,
        src.flowcean.grpc.proto.learner_pb2.Empty,
    ]

class LearnerAsyncStub:
    """The Learner service provides RPCs for training, prediction, and export."""

    Train: grpc.aio.UnaryStreamMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.DataPackage,
        src.flowcean.grpc.proto.learner_pb2.StatusMessage,
    ]

    Predict: grpc.aio.UnaryUnaryMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.DataPackage,
        src.flowcean.grpc.proto.learner_pb2.Prediction,
    ]

    Export: grpc.aio.UnaryUnaryMultiCallable[
        src.flowcean.grpc.proto.learner_pb2.Empty,
        src.flowcean.grpc.proto.learner_pb2.Empty,
    ]

class LearnerServicer(metaclass=abc.ABCMeta):
    """The Learner service provides RPCs for training, prediction, and export."""

    @abc.abstractmethod
    def Train(
        self,
        request: src.flowcean.grpc.proto.learner_pb2.DataPackage,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[src.flowcean.grpc.proto.learner_pb2.StatusMessage], collections.abc.AsyncIterator[src.flowcean.grpc.proto.learner_pb2.StatusMessage]]: ...

    @abc.abstractmethod
    def Predict(
        self,
        request: src.flowcean.grpc.proto.learner_pb2.DataPackage,
        context: _ServicerContext,
    ) -> typing.Union[src.flowcean.grpc.proto.learner_pb2.Prediction, collections.abc.Awaitable[src.flowcean.grpc.proto.learner_pb2.Prediction]]: ...

    @abc.abstractmethod
    def Export(
        self,
        request: src.flowcean.grpc.proto.learner_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[src.flowcean.grpc.proto.learner_pb2.Empty, collections.abc.Awaitable[src.flowcean.grpc.proto.learner_pb2.Empty]]: ...

def add_LearnerServicer_to_server(servicer: LearnerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
